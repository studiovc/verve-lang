// RUN: %verve | %check

interface Intish<T> {
  let to_int : (T) -> Int
}

implementation Intish<Int> {
  fn to_int(x) { x }
}

fn bool_to_int(x: Bool) -> Int {
  if x { 1 } else { 0 }
}
implementation Intish<Bool> {
  let to_int = bool_to_int
}

to_int // CHECK-L: ∀(T: Intish). (T) -> Int
to_int(42) // CHECK: 42 : Int

fn g<U, T: Intish>(x: T) -> Int {
  to_int(x)
}

g(7) // CHECK-L: 7 : Int

fn f<T: Intish>(x: T) -> Int {
  g(x)
}

f(32) // CHECK: 32 : Int

interface Read<T> {
  let read : () -> T
}

implementation Read<Int> {
  fn read() {
    17
  }
}
implementation Read<Bool> {
  fn read() {
    True
  }
}

fn id<T>(x: T) -> T { x }

/*id<Int>(read()) / / CHECK: 17 : Int*/
/*id<Bool>(read()) / / CHECK: True : Bool*/

// (ideally) exhaustive check of use cases

"direct"
to_int(4) // CHECK-L: 4 : Int
to_int(False) // CHECK-L: 0 : Int

"within a function"
fn f<T: Intish>(x: T) -> Int {
  to_int(x)
}
f(4) // CHECK-L: 4 : Int
f(True) // CHECK-L: 1 : Int

/*"as monomorphic identity"*/
/*fn f(f: (Int) -> Int) -> (Int) -> Int {*/
  /*f*/
/*}*/
/*f(to_int)(5) / / CHECK-L: 5 : Int*/
/*let x = f(to_int) / / CHECK-L: (Int) -> Int*/
/*x(5) / / CHECK-L: 5 : Int*/

/*"through monomorphic apply"*/
/*fn g(f: (Int) -> Int, x: Int) -> Int {*/
  /*f(x)*/
/*}*/
/*g(to_int, 5) / / CHECK-L: 5 : Int*/
/*g(to_int)(5) / / CHECK-L: 5 : Int*/
/*let x = g(to_int) / / CHECK-L: (Int) -> Int*/
/*x(5) / / CHECK-L: 5 : Int*/

/*"as polymorphic identity"*/
/*fn f<T: Intish>(f: (T) -> Int) -> (T) -> Int {*/
  /*f*/
/*}*/
/*f(to_int)(5) / / CHECK-L: 5 : Int*/
/*let x = f(to_int) / / CHECK: forall T.*, \(T.*: Intish\) -> Int*/
/*x(5) / / CHECK-L: 5 : Int*/
/*x(True) / / CHECK-L: 1 : Int*/
/*x<Int>(5) / / CHECK-L: 5 : Int*/

// TODO: fix subtyping for polymorphic functions
/*"through polymorphic apply"*/
/*fn app<T: Intish>(f: (T) -> Int, x: T) -> Int {*/
  /*f(x)*/
/*}*/
/*app(to_int, 42) / / CHECK-L: 42 : Int*/
/*app(to_int)(42) / / CHECK-L: 42 : Int*/
/*let x = app(to_int) / / CHECK: forall T.*, \(T.*: Intish\) -> Int*/
/*x(42) / / CHECK-L: 42 : Int*/
/*x(True) / / CHECK-L: 1 : Int*/
/*x<Int>(42) / / CHECK-L: 42 : Int*/

"multiple constrained variables"
fn add<T: Intish, U: Intish>(x: T, y: U) -> Int {
  int_add(to_int(x), to_int(y))
}
add(True, 42) // CHECK-L: 43 : Int
add(True)(42) // CHECK-L: 43 : Int
let x = add(True)
x // CHECK-L: ∀(U: Intish). (U) -> Int
x(42) // CHECK-L: 43 : Int
x(True) // CHECK-L: 2 : Int
x<Bool>(False)

// Check order when there are multiple constrained holes
fn f<A, B: Intish, C: Intish>(a: A, b: B, c: C) -> Int {
  int_add(to_int(b),to_int(c))
}
f(1)(False)(2) // CHECK-L: 2 : Int

implementation<T: Intish> Intish<List<T>> {
  fn to_int(xs) {
    42
  }
}
to_int([True])

enum Pair<A, B> {
  Pair(A, B)
}
implementation<T: Intish, U: Intish> Intish<Pair<T, U>> {
  fn to_int(p) {
    match p {
      case Pair(a, b): int_add(to_int(a), to_int(b))
    }
  }
}
to_int(Pair(42, True)) // CHECK-L: 43 : Int
to_int(Pair(42, False)) // CHECK-L: 42 : Int

implementation<T: Intish> Intish<List<T>> {
  fn to_int(xs) {
    match xs {
      case Cons(x, xs): int_add(to_int(x), to_int(xs))
      case Nil: 0
    }
  }
}
to_int([13, 31]) // CHECK-L: 44 : Int
to_int([]) // CHECK-L: 0 : Int
to_int([[[42]]]) // CHECK-L: 42 : Int

// Used to crash
fn to_int'<T: Intish>(x: T) { }
to_int'([30, 12]) // CHECK-L: () : Void

// Implement interface from different file
enum C { C }
implementation Printable<C> {
  fn to_string(c) { "C" }
}
to_string(C) // CHECK-L: "C" : String
