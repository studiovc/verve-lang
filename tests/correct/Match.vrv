// RUN: %verve | %check

enum Wrap {
  W(Int)
}

match W(42) {
  case W(x): x
} // CHECK: 42 : Int

enum Bool {
  True
  False
}

match True {
  case x: x
} // CHECK: True : Bool

enum PairT<T, U> {
  Pair(T, U)
}

match Pair(2, True) {
  case Pair(x, _): x
} // CHECK: 2 : Int

match Pair(2, True) {
  case Pair(_, y): y
} // CHECK: True : Bool

type StdList = List

enum List<T> {
  Nil
  Cons(T, List<T>)
}

enum Nat {
  Z
  S(Nat)
}

fn length<T>(l: List<T>) -> Nat {
  match l {
    case Nil: Z
    case Cons(_, tail): S(length(tail))
  }
}

length(Nil) // CHECK-L: Z : Nat
length(Cons(1, Nil)) // CHECK-L: S(Z) : Nat
length(Cons(1, Cons(2, Cons(3, Nil)))) // CHECK-L: S(S(S(Z))) : Nat

fn add(x: Nat, y: Nat) -> Nat {
  match x {
    case Z: y
    case S(x): S(add(x, y))
  }
}
add(S(S(Z)), S(S(S(Z)))) // CHECK-L: S(S(S(S(S(Z))))) : Nat

fn half(x: Nat) -> Nat {
  match x {
    case S(S(x)): S(half(x))
    case S(Z): Z
    case x: x
  }
}
half(Z) // CHECK-L: Z : Nat
half(S(Z)) // CHECK-L: Z : Nat
half(S(S(Z))) // CHECK-L: S(Z) : Nat
half(S(S(S(Z)))) // CHECK-L: S(Z) : Nat
half(S(S(S(S(Z))))) // CHECK-L: S(S(Z)) : Nat

/* RECORD MATCHING */

// Nested literal pattern
match { x: 42 } {
  case { x: 42 }: True
  case { x: _ }: False
} // CHECK-L: True : Bool

// Test correct match
match { x: 13, y: 13 } {
  case { x: _, y: 42 }: True
  case { x: _, y: _ }: False
} // CHECK-L: False : Bool

// Nested variable binding
match { x: W(42) } {
  case { x: W(x) }: x
} // CHECK-L: 42 : Int


/* LIST MATCHING */

// Test empty list
match [] {
  case []: True
  case [_]: False
} // CHECK-L: True : Bool

// Test non-empty list
match [42] {
  case []: True
  case [_]: False
} // CHECK-L: False : Bool

// Test extracting items
fn extract(l: StdList<Int>) -> Int {
  match l {
    case [_, _, z]: z
    case [_, y]: y
    case [x]: x
  }
}

extract([1]) // CHECK-L: 1 : Int
extract([1, 2]) // CHECK-L: 2 : Int
extract([1, 2, 3]) // CHECK-L: 3 : Int

fn null<T>(l: StdList<T>) -> Bool {
  match l {
    case []: True
    case [...]: False
  }
}
null([]) // CHECK-L: True : Bool
null([1]) // CHECK-L: False : Bool
null([1, 2, 3]) // CHECK-L: False : Bool

fn stdLength<T>(l: StdList<T>) -> Int {
  match l {
    case []: 0
    case [_, ...rest]: int_add(1, stdLength(rest))
  }
}

stdLength([]) // CHECK-L: 0 : Int
stdLength([1]) // CHECK-L: 1 : Int
stdLength([1, 2, 3]) // CHECK-L: 3 : Int

// match empty list
match [] {
  case []: 0
  case [1]: 1
} // CHECK-L: 0 : Int
