// RUN: %not %verve | %check

interface Intish<T> {
  let to_int : (T) -> Int
}

fn g'<T>(x: T) -> Int {
  to_int(x) // CHECK-L: No implementation of `Intish` for type `T`
}

implementation Intish<Int> {
  fn to_int(x) {
    True // CHECK-L: Expected a value of type `Int`, but found `Bool`
  }
}

implementation Intish<Bool> {
  fn to_int(x) { 0 }
  fn to_bool(x) { x } // CHECK-L: Implementation contains method `to_bool` which is not part of the interface
}

implementation Intish<Bool> {} // CHECK-L: Implementation is missing method `to_int`

implementation Intish<Int> {
  fn to_int(x) { x }
}

implementation Intish<Bool> {
  fn to_int(x) {
    if x { 1 } else { 0 }
  }
}

interface Math<T> {
  let add : (T, T) -> Int
}

implementation Math<Bool> {
  fn add(x, y) { 0 }
}

enum Maybe<T> {
  None
  Some(T)
}

// CHECK-L: Implementation of `Intish` for type `Maybe<Int>` does not use all the type variables it introduces and/or uses concrete types.
implementation Intish< Maybe<Int> > {
}

fn f<T: Int>(x: T) { } // CHECK-L: Unknown interface: Int

enum Pair<A, B> {
  Pair(A, B)
}

implementation<T: Intish, U: Intish> Intish<Pair<T, U>> {
  fn to_int(p) {
    match p {
      case Pair(a, b): int_add(to_int(a), to_int(b))
    }
  }
}

to_int(Pair(42, "")) // CHECK-L: No implementation of `Intish` for type `String`
to_int(Pair(False)) // CHECK-L: No implementation of `Intish`

implementation<T: Intish, U> Intish<Pair<T, U>> {
  fn to_int(p) {
    match p {
      case Pair(a, b): int_add(to_int(a), to_int(b))
      // CHECK-L: No implementation of `Intish` for type `U`
    }
  }
}

// CHECK-L: let bindings within interfaces must be functions
interface I<T> {
  let x : T
}
